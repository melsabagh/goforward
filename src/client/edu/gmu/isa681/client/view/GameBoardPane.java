/*** Copyright 2013 Mohamed Elsabagh <melsabag@gmu.edu>**** This file is part of GoForward. See LICENSE for more details.*/package edu.gmu.isa681.client.view;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Component;import java.awt.ComponentOrientation;import java.awt.Container;import java.awt.Dimension;import java.awt.FlowLayout;import java.awt.Font;import java.awt.GridLayout;import java.awt.Point;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.ComponentAdapter;import java.awt.event.ComponentEvent;import java.awt.event.MouseEvent;import java.awt.event.MouseListener;import java.awt.event.MouseMotionListener;import java.util.ArrayList;import java.util.Hashtable;import java.util.List;import javax.swing.JButton;import javax.swing.JLabel;import javax.swing.JLayeredPane;import javax.swing.JPanel;import javax.swing.JProgressBar;import javax.swing.SwingConstants;import javax.swing.SwingUtilities;import javax.swing.Timer;import edu.gmu.isa681.client.controller.Controller;import edu.gmu.isa681.client.controller.GameStateListener;import edu.gmu.isa681.client.controller.MoveResultListener;import edu.gmu.isa681.ctn.response.GameStateResponse;import edu.gmu.isa681.game.Card;public final class GameBoardPane extends Container implements MouseListener, MouseMotionListener {  private static final long serialVersionUID = 758179226966452145L;  private JLayeredPane layeredPane;  private JPanel content;    private JLabel player2Label;  private Container player2Panel;  private JPanel player2CardsPanel;  private JLabel player2ClockLabel;    private JPanel boardPanel;    private JButton forfeitButton;  private JButton passButton;  private JPanel player1CardsPanel;  private Container player1Panel;  private JProgressBar player1ProgressBar;  private JLabel player1ClockLabel;  private JLabel player1Label;    private String player1Name;  private String player2Name;  private String turn;    private ArrayList<CardLabel> player1Cards = new ArrayList<CardLabel>();  //private static Color BACKGROUND_COLOR = new Color(0, 100, 0);    private Controller controller;    public GameBoardPane(final Controller controller) {    this.controller = controller;        setLayout(new GridLayout(1,1));        layeredPane = new JLayeredPane();    layeredPane.addMouseListener(this);    layeredPane.addMouseMotionListener(this);    layeredPane.setLayout(null);    //layeredPane.setBackground(BACKGROUND_COLOR);    layeredPane.setOpaque(false);    add(layeredPane);        content = new JPanel();    content.setLayout(new BorderLayout(20, 10));    content.setOpaque(false);    layeredPane.add(content);        addComponentListener(new ComponentAdapter() {      @Override      public void componentResized(ComponentEvent e) {        content.setLocation(0, 0);        content.setBounds(0, 0, getWidth(), getHeight());        revalidate();      }    });        player2Panel = createPlayer2Panel();    content.add(player2Panel, BorderLayout.NORTH, JLayeredPane.DEFAULT_LAYER);            boardPanel = new BoardPanel();    boardPanel.setDoubleBuffered(true);    boardPanel.setFont(new Font("Helvatica", Font.BOLD, 48));    boardPanel.setForeground(new Color(0, 90, 0));    //boardPanel.setBackground(BACKGROUND_COLOR);    boardPanel.setOpaque(false);    boardPanel.setName("Drag and drop cards here");    content.add(boardPanel, BorderLayout.CENTER, JLayeredPane.DEFAULT_LAYER);            player1Panel = createPlayer1Panel();     content.add(player1Panel, BorderLayout.SOUTH, JLayeredPane.DEFAULT_LAYER);        controller.addGameStateListener(new GameStateListener() {      @Override      public void stateChanged(final GameStateResponse response) {        SwingUtilities.invokeLater(new Runnable() {          @Override          public void run() {            handleStateChanged(response);          }        });      }    });  }      private Container createPlayer2Panel() {    JPanel container = new JPanel();    container.setOpaque(false);    container.setLayout(new BorderLayout(10, 10));        player2Label = new JLabel("Player2");    player2Label.putClientProperty("html.disable", Boolean.TRUE);    player2Label.setForeground(Color.WHITE);    player2Label.setHorizontalAlignment(SwingConstants.CENTER);        container.add(player2Label, BorderLayout.NORTH);        player2CardsPanel = new JPanel();    player2CardsPanel.setLayout(new FlowLayout(FlowLayout.CENTER, -40, 0));    player2CardsPanel.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);    player2CardsPanel.setDoubleBuffered(true);    //player2cardsPanel.setBackground(BACKGROUND_COLOR);    player2CardsPanel.setOpaque(false);        container.add(player2CardsPanel, BorderLayout.CENTER);        JPanel eastContainer = new JPanel();    eastContainer.setLayout(new BorderLayout(25, 0));        JPanel clockPanel = new JPanel();    clockPanel.setOpaque(false);    clockPanel.setLayout(new BorderLayout(30, 0));        player2ClockLabel = new JLabel("--");    player2ClockLabel.setForeground(Color.WHITE);    player2ClockLabel.setHorizontalAlignment(SwingConstants.CENTER);    player2ClockLabel.setFont(new Font("Helvatica", Font.BOLD, 28));    clockPanel.add(player2ClockLabel, BorderLayout.CENTER);        eastContainer.add(clockPanel, BorderLayout.CENTER);        eastContainer.add(new JLabel(" "), BorderLayout.EAST);        container.add(eastContainer, BorderLayout.EAST);        return container;  }    private Container createPlayer1Panel() {    JPanel container = new JPanel();    container.setOpaque(false);    container.setLayout(new BorderLayout(10, 10));        player1CardsPanel= new JPanel();    player1CardsPanel.setLayout(new FlowLayout(FlowLayout.CENTER, -40, 0));    player1CardsPanel.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);    player1CardsPanel.setDoubleBuffered(true);    //player1CardsPanel.setBackground(BACKGROUND_COLOR);    player1CardsPanel.setOpaque(false);        container.add(player1CardsPanel, BorderLayout.CENTER);        JPanel eastContainer = new JPanel();    eastContainer.setLayout(new BorderLayout(5, 0));        JPanel clockPanel = new JPanel();    clockPanel.setOpaque(false);    clockPanel.setLayout(new BorderLayout(30, 0));    passButton = new JButton("Pass");    passButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        controller.passTurn(new MoveResultListener() {          @Override          public void rejected(Card move) {            System.out.println("REJECTED: PASS");          }                    @Override          public void accepted(Card move) {            System.out.println("ACCEPTED: PASS");           }        });                restartTimer(submitTimer, player1ProgressBar, controller.getSubmitMoveTimeout());      }    });        clockPanel.add(passButton, BorderLayout.NORTH);        player1ClockLabel = new JLabel("--");    player1ClockLabel.putClientProperty("html.disable", Boolean.TRUE);    player1ClockLabel.setForeground(Color.WHITE);    player1ClockLabel.setHorizontalAlignment(SwingConstants.CENTER);    player1ClockLabel.setFont(new Font("Helvatica", Font.BOLD, 28));    clockPanel.add(player1ClockLabel, BorderLayout.CENTER);        forfeitButton = new JButton("Forfeit");    forfeitButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        controller.forfeit();        setEnabledPlayer1(false);        setEnabledPlayer2(false);      }    });        clockPanel.add(forfeitButton, BorderLayout.SOUTH);        eastContainer.add(clockPanel, BorderLayout.CENTER);        player1ProgressBar = new JProgressBar(JProgressBar.VERTICAL);    player1ProgressBar.setPreferredSize(new Dimension(10, 72));    eastContainer.add(player1ProgressBar, BorderLayout.WEST);        eastContainer.add(new JLabel(" "), BorderLayout.EAST);        container.add(eastContainer, BorderLayout.EAST);        player1Label = new JLabel("Player1");    player1Label.putClientProperty("html.disable", Boolean.TRUE);    player1Label.setForeground(Color.WHITE);    player1Label.setHorizontalAlignment(SwingConstants.CENTER);        container.add(player1Label, BorderLayout.SOUTH);        return container;  }    public void setPlayer1Name(String username) {    this.player1Name = username;    player1Label.setText(username);    player1Label.repaint();  }    public void setPlayer2Name(String username) {    this.player2Name = username;    player2Label.setText(username);    player2Label.repaint();  }  public void setPlayer1Cards(List<Card> cards) {    for (JLabel lbl : player1Cards) {      player1CardsPanel.remove(lbl);    }        player1Cards.clear();        for (Card c : cards) {      CardLabel lbl = new CardLabel(c);      player1Cards.add(lbl);      player1CardsPanel.add(lbl);    }        revalidate();  }    public void setPlayer2Cards(int cardsCount) {    player2CardsPanel.removeAll();    revalidate();        for (int i = 0; i < cardsCount; ++i) {      CardLabel lbl = new CardLabel(null);      player2CardsPanel.add(lbl);    }             revalidate();  }  private volatile CardLabel draggedCardLabel;  private volatile Point draggedAt;  private volatile int draggedCardIndex;    @Override  public void mousePressed(MouseEvent e) {    Component c =  findComponentAt(e.getX(), e.getY());    if (!(c.isEnabled())) return;    if (!(c instanceof CardLabel)) return;    if (!(c.getParent() == player1CardsPanel)) return;    draggedAt = e.getPoint();    draggedCardLabel = (CardLabel)c;        synchronized (player1CardsPanel.getTreeLock()) {      int count = player1CardsPanel.getComponentCount();      for (int i = 0; i < count; ++i) {        if (player1CardsPanel.getComponent(i) == draggedCardLabel) {          draggedCardIndex = i;          break;        }      }    }        Point loc = SwingUtilities.convertPoint(draggedCardLabel.getParent(), draggedCardLabel.getLocation(), layeredPane);    draggedCardLabel.setLocation(loc.x, loc.y);    lastLocation = loc;    layeredPane.add(draggedCardLabel);    layeredPane.setLayer(draggedCardLabel, JLayeredPane.DRAG_LAYER);  }  private Point lastLocation = null;  public void mouseDragged(MouseEvent e) {    if (draggedCardLabel == null) return;    Point newLocation = lastLocation; //draggedCardLabel.getLocation();    newLocation.translate(e.getX() - draggedAt.x, e.getY() - draggedAt.y);    newLocation.x = Math.min(Math.max(newLocation.x, 0), layeredPane.getWidth() - draggedCardLabel.getWidth());    newLocation.y = Math.min(Math.max(newLocation.y, 0), layeredPane.getHeight() - draggedCardLabel.getHeight());    newLocation.x = Math.min(Math.max(newLocation.x, 0), layeredPane.getWidth() - 72);    newLocation.y = Math.min(Math.max(newLocation.y, 0), layeredPane.getHeight() - 72);        lastLocation = newLocation;    draggedCardLabel.setLocation(newLocation);    draggedAt = e.getPoint();  }    @Override  public void mouseReleased(MouseEvent e) {    if (draggedCardLabel == null) return;    draggedCardLabel.setVisible(false);    remove(draggedCardLabel);    int xMax = getWidth() - draggedCardLabel.getWidth();    int x = Math.max(Math.min(e.getX(), xMax), 0);    int yMax = getHeight() - draggedCardLabel.getHeight();    int y = Math.max(Math.min(e.getY(), yMax), 0);    Component c =  findComponentAt(x, y);        if (c.isEnabled() && (c == boardPanel || c.getParent() == boardPanel)) {            boardPanel.add(draggedCardLabel);      draggedCardLabel.setVisible(true);            submitMove(draggedCardLabel, draggedCardIndex);          } else {      player1CardsPanel.add(draggedCardLabel, draggedCardIndex);      draggedCardLabel.setVisible(true);    }        revalidate();    draggedCardLabel = null;    draggedAt = null;  }  @Override  public void mouseEntered(MouseEvent e) {}  @Override  public void mouseExited(MouseEvent e) {}  @Override  public void mouseMoved(MouseEvent e) {}  @Override  public void mouseClicked(MouseEvent e) {}        private static class CardLabelIndexPair {    final CardLabel cardLabel;    final int cardLabelIndex;    public CardLabelIndexPair(CardLabel cardLabel, int cardLabelIndex) {      this.cardLabel = cardLabel;      this.cardLabelIndex = cardLabelIndex;    }  }    private Hashtable<Card, CardLabelIndexPair> tab = new Hashtable<Card, CardLabelIndexPair>();    private void submitMove(CardLabel cardLabel, int cardLabelIndex) {    tab.put(cardLabel.getCard(), new CardLabelIndexPair(cardLabel, cardLabelIndex));        controller.submitMove(cardLabel.getCard(), new MoveResultListener() {      @Override      public void accepted(Card move) {        System.out.println("ACCEPTED: "+ move);      }      @Override      public void rejected(final Card move) {        System.out.println("REJECTED: "+ move);                SwingUtilities.invokeLater(new Runnable() {          @Override          public void run() {            CardLabelIndexPair pair = tab.get(move);            pair.cardLabel.setVisible(false);            remove(pair.cardLabel);                        player1CardsPanel.add(pair.cardLabel, pair.cardLabelIndex);            pair.cardLabel.setVisible(true);                        revalidate();          }        });      }    });        if (player1Name.equals(turn)) {      restartTimer(submitTimer, player1ProgressBar, controller.getSubmitMoveTimeout());    }  }    private void handleStateChanged(GameStateResponse response) {    String currentPlayer = response.getGameState().getCurrentPlayer();    String nextPlayer = response.getGameState().getNextPlayer();    int timeout = response.getGameState().getTimeout();        if (currentPlayer != null) {      if (player1Name.equals(currentPlayer)) {        //pass              } else {        List<Card> move = response.getGameState().getCurrentMove();                if (move != null) {          for (Card c : move) {            CardLabel cardLabel = new CardLabel(c);            boardPanel.add(cardLabel);          }                    for (int i = 0; i < response.getPlayersState().size(); ++i) {            if (player2Name.equals(response.getPlayersState().get(i).getUsername())) {              setPlayer2Cards(response.getPlayersState().get(i).getCardsCount());            }          }        }      }    }        setTurn(nextPlayer, timeout);    revalidate();  }    private class CountdownListener implements ActionListener {    private Container target;    private int timeout;        public CountdownListener(Container target) {      this.target = target;    }        public void setTimeout(int timeout) {      this.timeout = timeout;    }        @Override    public void actionPerformed(ActionEvent e) {      if (!isShowing() || timeout <= 0) {        ((Timer)e.getSource()).stop();        return;      }            timeout --;      if (target instanceof JLabel) {        ((JLabel)target).setText(Integer.toString(timeout));              } else if (target instanceof JProgressBar) {        ((JProgressBar)target).setValue(timeout);      }            if (timeout == 0) {        controller.signalTimeout();      }    }  }    private Timer submitTimer = new Timer(1000, null);  private Timer countdownTimer = new Timer(1000, null);    private void stopTimer(Timer timer) {    timer.stop();  }    private void restartTimer(Timer timer, Container target, int timeout) {    for (ActionListener a : timer.getActionListeners()) {      timer.removeActionListener(a);    }        if (target instanceof JProgressBar) {      ((JProgressBar)target).setMaximum(timeout);    }        CountdownListener countdownListener = new CountdownListener(target);    timer.addActionListener(countdownListener);    countdownListener.setTimeout(timeout);    timer.setInitialDelay(0);    timer.restart();  }    private void setTurn(final String playerName, final int timeout) {    this.turn = playerName;    if (playerName == null) {      stopTimer(countdownTimer);      stopTimer(submitTimer);            setEnabledPlayer1(false);      setEnabledPlayer2(false);          } else if (playerName.equals(player1Name)) {      stopTimer(countdownTimer);      stopTimer(submitTimer);            setEnabledPlayer2(false);      setEnabledPlayer1(true);      restartTimer(countdownTimer, player1ClockLabel, timeout);      player2ClockLabel.setText("--");          } else if (playerName.equals(player2Name)) {      stopTimer(countdownTimer);      stopTimer(submitTimer);            setEnabledPlayer2(true);      setEnabledPlayer1(false);            restartTimer(countdownTimer, player2ClockLabel, timeout);      player1ClockLabel.setText("--");          } else {      throw new RuntimeException("Invalid player: "+ playerName);    }  }    private void setEnabledPlayer1(boolean enabled) {    forfeitButton.setEnabled(enabled);    passButton.setEnabled(enabled);    for (Component c : player1CardsPanel.getComponents()) {      c.setEnabled(enabled);     }    revalidate();  }    private void setEnabledPlayer2(boolean enabled) {    for (Component c : player2CardsPanel.getComponents()) {      c.setEnabled(enabled);    }    revalidate();  }  }